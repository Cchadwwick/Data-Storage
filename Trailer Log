pragma solidity >=0.4.22 <0.6.0;

contract TrailerLog {
    
    struct Driver {
        uint ID;
        string name;
        string license; 
        string cab;
    }
    
    struct Trailer {
        uint ID;
        uint timeIn;
        string trailer;
        uint carrier;
        string status;
        uint seal;
        uint timeOut;
    }
    
    address guard;
    Driver[] drivers;
    Trailer[] trailers;
    uint nextID = 1;
    
    constructor() public {
        guard = msg.sender;
    }
    
    modifier isGuard {
        require(msg.sender == guard);
        _;
    }
    
    event enter(uint ID, uint timeIn, string trailer, uint carrier, string status, uint seal);
    event exit(uint ID, string trailer, string status, uint seal, uint timeOut);
    
    function inbound(uint timeIn, string memory name, string memory license, string memory cab, string memory trailer, uint carrier, string memory status, uint seal, uint timeOut) public isGuard {
        drivers.push(Driver(nextID, name, license, cab));
        trailers.push(Trailer(nextID, timeIn, trailer, carrier, status, seal, timeOut));
        nextID++;
        timeOut = 0;
        emit enter(nextID, timeIn, trailer, carrier, status, seal);
    }
    
    function outbound(uint ID, string memory trailer, string memory status, uint seal, uint timeOut) public isGuard {
        uint i = find(ID);
        trailers[i].trailer = trailer;
        trailers[i].status = status;
        trailers[i].seal = seal;
        trailers[i].timeOut = timeOut;
        emit exit(ID, trailer, status, seal, timeOut);
    }
    
    function updateTrailer(uint ID, string memory trailer, uint carrier, string memory status, uint seal) public isGuard {
        uint i = find(ID);
        trailers[i].trailer = trailer;
        trailers[i].carrier = carrier;
        trailers[i].status = status;
        trailers[i].seal = seal;
    }
    
    function read(uint ID) public view returns(uint, string memory, string memory, string memory, uint, string memory, uint, string memory, uint, uint) {
        uint i = find(ID);
        return(drivers[i].ID,
               drivers[i].name,
               drivers[i].license,
               drivers[i].cab,
               trailers[i].timeIn,
               trailers[i].trailer,
               trailers[i].carrier,
               trailers[i].status,
               trailers[i].seal,
               trailers[i].timeOut);
    }
    
    function remove(uint ID) public isGuard {
        uint i = find(ID);
        delete drivers[i];
        delete trailers[i];
    }
    
    function find(uint ID) view internal returns(uint) {
        for(uint i = 0; i < trailers.length; i++){
            if(drivers[i].ID == ID){
                return i;
            }
        }
    revert('Trailer does not exist!');
    }
}
